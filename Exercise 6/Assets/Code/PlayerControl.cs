using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Control code for the the player's game object.
/// Very approximate simulation of flight dynamics.
/// </summary>
public class PlayerControl : MonoBehaviour {
    /// <summary>
    /// Coefficient of draft for head winds
    /// </summary>
    [Header("Aerodynamic coefficients")]
    public float ForwardDragCoefficient = 0.01f;
    /// <summary>
    /// Drag coefficient for winds blowing up/down across wings
    /// </summary>
    public float VerticalDragCoefficient = 0.5f;
    /// <summary>
    /// Lift generated by the wings
    /// </summary>
    public float LiftCoefficient = 0.01f;

    /// <summary>
    /// How far the plane can tilt around the X axis
    /// </summary>
    [Header("Movement Speeds")]
    public float PitchRange = 45f;
    /// <summary>
    /// How far the plane can rotate about the Z axis
    /// </summary>
    public float RollRange = 45;
    /// <summary>
    /// How fast the plane yaws for a given degree of roll.
    /// </summary>
    public float RotationalSpeed = 5f;
    /// <summary>
    /// Thrust generated when the throttle is pulled back all the way.
    /// </summary>
    public float MaximumThrust = 40f;

    /// <summary>
    /// Text element for displaying status information
    /// </summary>
    [Header("HUD")]
    public Text StatusDisplay;
    /// <summary>
    /// Text element for displaying game-over text
    /// </summary>
    public Text GameOverText;

    /// <summary>
    /// Cached copy of the player's RigidBody component
    /// </summary>
    private Rigidbody playerRB;


    /// <summary>
    /// Magic layer mask code for the updraft(s)
    /// </summary>
    const int UpdraftLayerMask = 1 << 8;


    #region Internal flight state
    /// <summary>
    /// Current yaw (rotation about the Y axis)
    /// </summary>
    private float yaw;
    /// <summary>
    /// Current pitch (rotation about the X axis)
    /// </summary>
    private float pitch;
    /// <summary>
    /// Current roll (rotation about the Z axis)
    /// </summary>
    private float roll;
    /// <summary>
    /// Current thrust (forward force provided by engines
    /// </summary>
    private float thrust;
    #endregion

    private float smooth = 1f;

    /// <summary>
    /// Initialize component
    /// </summary>
    internal void Start() {
        playerRB = GetComponent<Rigidbody>();
        playerRB.velocity = transform.forward * 3;
    }

    /// <summary>
    /// Show game-over display
    /// </summary>
    /// <param name="safe">True if we won, false if we crashed</param>
    private void OnGameOver(bool safe) {
        playerRB.velocity = Vector3.zero;
        playerRB.useGravity = false;
        playerRB.constraints = RigidbodyConstraints.FreezeAll;
        if (safe) {
            GameOverText.text = "You Win!";
        } else {
            GameOverText.text = "OOPS";
        }
    }

    /// <summary>
    /// Display status information
    /// </summary>
    internal void OnGUI()
    {
        StatusDisplay.text = string.Format("Speed: {0:00.00}    altitude: {1:00.00}    Thrust {2:0.0}",
            playerRB.velocity.magnitude,
            transform.position.y,
            thrust);
    }

    private void FixedUpdate()
    {

        UpdateRotation();
        UpdateThrust();
        UpdateAerodynamics();

    }
    private void UpdateAerodynamics()
    {
        Updraft updraft = GameObject.Find("Updraft").GetComponent<Updraft>();
        //Debug.Log("updraft.transform = " + updraft.transform.position + "updraft.tranform.scale = " + updraft.transform.localScale);
        Vector3 offset = new Vector3(0, updraft.transform.localScale.y, 0);
        Collider[] colliders = Physics.OverlapSphere(
                                transform.position,
                                1f,
                                LayerMask.GetMask("Updrafts"));
        Vector3 start = updraft.transform.position + offset;
        Vector3 end = updraft.transform.position - offset;
        //Debug.Log("start = " + start);
        //Debug.Log("end = " + end);
        //Debug.Log("LayerMask.GetMask(\"Updrafts\") = " + LayerMask.GetMask("Updrafts"));

        //Debug.Log("colliders.length = " + colliders.Length);
        //Debug.Log("collider = " + colliders[0].gameObject.name);
        if ( colliders.Length > 0)
        {
            Vector3 velWind = GameObject.Find("Updraft").GetComponent<Updraft>().WindVelocity;
            LiftForce(velWind);
            DragForce(velWind);
        }
        else
        {
            LiftForce();
            DragForce();
        }

    }
    private void LiftForce(Vector3 velWind)
    {
        float velf = Vector3.Dot(velWind - playerRB.velocity, transform.forward);
        Vector3 force = LiftCoefficient * Mathf.Pow(velf, 2) * transform.up;
        playerRB.AddForce(force);
    }
    private void DragForce(Vector3 velWind)
    {
        float velf = Vector3.Dot(velWind - playerRB.velocity, transform.forward);
        Vector3 force_fd = Mathf.Sign(velf) * ForwardDragCoefficient * Mathf.Pow(velf, 2) * transform.forward;
        float velup = Vector3.Dot(velWind - playerRB.velocity, transform.up);
        Vector3 force_up = Mathf.Sign(velup) * Mathf.Pow(velup, 2) * transform.up;

        playerRB.AddForce(force_fd + force_up);
    }
    private void LiftForce()
    {
        float velf = Vector3.Dot(playerRB.velocity, transform.forward);
        Vector3 force = LiftCoefficient * Mathf.Pow(velf, 2) * transform.up;
        playerRB.AddForce(force);

        //Debug.Log("force = " + force);
    }
    private void DragForce()
    {
        float velf = Vector3.Dot(-playerRB.velocity, transform.forward);
        Vector3 force_fd = Mathf.Sign(velf) * ForwardDragCoefficient * Mathf.Pow(velf, 2) * transform.forward;
        float velup = Vector3.Dot(-playerRB.velocity, transform.up);
        Vector3 force_up = Mathf.Sign(velup) * Mathf.Pow(velup, 2) * transform.up;

        playerRB.AddForce(force_fd + force_up);
    }

    private void UpdateThrust()
    {
        float deltaThrust = Input.GetAxis("Thrust");

        // for test
        //float deltaThrust = 0; 
        //deltaThrust = Input.GetKey(KeyCode.UpArrow) ? 0.25f : deltaThrust;
        //deltaThrust = Input.GetKey(KeyCode.DownArrow) ? -0.25f : deltaThrust;

        thrust = thrust + deltaThrust * 0.2f;
        // constraint of thrust range
        thrust = Mathf.Max(0.001f, thrust);
        thrust = Mathf.Min(MaximumThrust, thrust);
        Vector3 force = transform.forward * thrust;
        playerRB.AddForce(force);

        //Debug.Log("forward = " + transform.forward);
        //Debug.Log("deltaThrust = " + deltaThrust);
        //Debug.Log("thrust = " + thrust);
    }

    private void UpdateRotation()
    {
        float deltaRoll = Input.GetAxis("Horizontal");
        float deltaPitch = Input.GetAxis("Vertical");

        // FOR TEST
        //float deltaRoll = 0, deltaPitch = 0;
        //deltaRoll = Input.GetKey(KeyCode.A) ? 5 : deltaRoll;
        //deltaRoll = Input.GetKey(KeyCode.D) ? -5 : deltaRoll;
        //deltaPitch = Input.GetKey(KeyCode.W) ? 5 : deltaPitch;
        //deltaPitch = Input.GetKey(KeyCode.S) ? -5 : deltaPitch;
        //Debug.Log("deltaPitch before= " + deltaPitch);

        if ( Mathf.Abs(deltaPitch) < 0.02f)
        {
            deltaPitch = 0f;
        }
        if ( Mathf.Abs(deltaRoll) < 0.02f)
        {
            deltaRoll = 0f;
        }
        //Debug.Log("deltaPitch after= " + deltaPitch);

        float newRoll = roll + deltaRoll * 10f;
        float newPitch = pitch + deltaPitch * 10f;

        // contraint of roll range
        newRoll = Mathf.Max(-RollRange, newRoll);
        newRoll = Mathf.Min(RollRange, newRoll);
        // constraint of pitch range
        newPitch = Mathf.Min(PitchRange, newPitch);
        newPitch = Mathf.Max(-PitchRange, newPitch);


        // update yaw
        float deltaYaw = newRoll * RotationalSpeed;
        float newYaw = yaw - deltaYaw;

        // update rotaion at last
        pitch = Mathf.Lerp(pitch, newPitch, Time.deltaTime * smooth);
        yaw = Mathf.Lerp(yaw, newYaw, Time.deltaTime * smooth);
        roll = Mathf.Lerp(roll, newRoll, Time.deltaTime * smooth);
        playerRB.MoveRotation(Quaternion.Euler(pitch, yaw, roll));
        //Debug.Log("Pitch = " + pitch);
        //Debug.Log("newPitch = " + newPitch);
    }
    private void OnCollisionEnter(Collision collision)
    {
        Debug.Log("collision.gameobject.name = " + collision.gameObject.name);
        Debug.Log("PlayerRB.velocity.magnitude = " + playerRB.velocity.magnitude);
        if (collision.gameObject.name == "LandingPlatform")
        {
            // crash because of speed.
            if (playerRB.velocity.magnitude > GameObject.Find("LandingPlatform").GetComponent<LandingPlatform>().MaxLandingSpeed)
            {
                OnGameOver(false);
            }
            OnGameOver(true);
        }
        else
        {
            OnGameOver(false);

        }
    }

}
